dnl Process this file with autoconf to produce a configure script.
AC_INIT(keyexchange.h)

dnl No real versioning yet, use dated snapshots instead.
dnl AM_INIT_AUTOMAKE(lsh, snapshot-`date +%Y-%m-%d`)
AM_INIT_AUTOMAKE(lsh, snapshot-esyscmd([date +%Y-%m-%d]))

AM_CONFIG_HEADER(config.h)

# We want an absolute path to the source-dir.
case "$srcdir" in
    /*)
    ;;
    *)
	oldsrcdir="$srcdir"
	srcdir="`cd \"$srcdir\";pwd`"
	AC_MSG_WARN([ Converted $oldsrcdir to $srcdir,
If this does not work, please use an absolute path to the configure script. ])
    ;;
esac

# We want to compile the crypto lib for use with lsh
CPPFLAGS="$CPPFLAGS -I$srcdir/include -DLSH"

# _GNU_SOURCE is needed on some readhat glibc based systems, to get
# proper declarations of crypt(), initgroups() and strsignal().
# Enable it on all systems untill some harm is reported

CPPFLAGS="$CPPFLAGS -D_GNU_SOURCE"

dnl Check options
AC_ARG_WITH(debug_alloc,
  [--with-debug-alloc    sanity check memory allocation and casts],
  [], [with_debug_alloc=yes])

dnl Can't use if, as it's difficult to quote the square brackets.
case "$with_debug_alloc" in
    no)
    ;;
    *) AC_DEFINE(DEBUG_ALLOC)
    ;;
esac

dnl Checks for programs.
AC_PROG_CC
AC_PROG_MAKE_SET
AC_PROG_RANLIB

dnl Checks for libraries.
AC_CHECK_LIB(gmp, mpz_set_d)
dnl Some debian systems have both gmp1 and gmp2.
AC_CHECK_LIB(gmp2, mpz_set_d)
AC_CHECK_LIB(crypt, crypt)
AC_CHECK_LIB(xnet, inet_addr)
AC_CHECK_LIB(nsl, hostbyname)
AC_CHECK_LIB(socket, setsockopt)

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h strings.h sys/time.h unistd.h)
AC_CHECK_HEADERS(gmp.h)
AC_CHECK_HEADERS(shadow.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_UID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME

AC_CHECK_SIZEOF(short, 2)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)
dnl FIXME: We should check that a pid_t fits in an int
	
dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_MEMCMP
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(select socket strerror strtol)
AC_CHECK_FUNCS(getspnam)

AC_REPLACE_FUNCS(poll)

dnl Check for broken shutdown
AC_MSG_CHECKING(for working shutdown on AF_UNIX sockets)
AC_CACHE_VAL(lsh_shutdown_on_unix_sockets,
[
AC_TRY_RUN([
#include <stdio.h>

#include <errno.h>

#include <sys/types.h>
#include <sys/socket.h>

#include <signal.h>

#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif

/* Creates a one-way socket connection. Returns 1 on success, 0 on
 * failure. fds[0] is for reading, fds[1] for writing (like for the
 * pipe() system call). */
static int make_pipe(int *fds)
{

#ifndef SHUT_RD
#define SHUT_RD 0
#define SHUT_WR 1
#define SHUT_RDWR 2
#endif

  if (socketpair(AF_LOCAL, SOCK_STREAM, 0, fds) < 0)
    {
      fprintf(stderr, "socketpair() failed: %s\n", strerror(errno));
      return 0;
    }
  fprintf(stderr, "Created socket pair. Using fd:s %d <-- %d\n", fds[0], fds[1]);

  if(shutdown(fds[0], SHUT_WR) < 0)
    {
      fprintf(stderr, "shutdown(%d, SHUT_WR) failed: %s\n", fds[0], strerror(errno));
      return 0;
    }
  if (shutdown(fds[1], SHUT_RD) < 0)
    {
      fprintf(stderr, "shutdown(%d, SHUT_RD) failed: %s\n", fds[1], strerror(errno));
      return 0;
    }

  return 1;
}

int main(int argc, char **argv)
{
  int fds[2];
  
  if (!make_pipe(fds))
    exit(1);

  if (signal(SIGPIPE, SIG_IGN) == SIG_ERR)
    {
      fprintf("signal failed.\n");
      exit(1);
    }

  if ( (write(fds[1], "foo", 3) < 0)
       && (errno == EPIPE))
    exit(1);

  exit(0);
}
], lsh_shutdown_on_unix_sockets=yes, lsh_shutdown_on_unix_sockets=no,
   lsh_shutdown_on_unix_sockets=yes)])

AC_MSG_RESULT($lsh_shutdown_on_unix_sockets)
if test x$lsh_shutdown_on_unix_sockets = xyes ; then
    AC_DEFINE(SHUTDOWN_WORKS_WITH_UNIX_SOCKETS)
fi

# Set these flags *last*, or else the test programs won't compile
if test x$GCC = xyes ; then
    CFLAGS="$CFLAGS -Wall -Wmissing-prototypes \
                 -Wmissing-declarations -Werror"
fi

AC_OUTPUT(Makefile lib/Makefile include/Makefile)

dnl syscmd([cd lib && autoconf])
