# LSH Makefile

@SET_MAKE@

srcdir = @srcdir@
VPATH = @srcdir@

top_srcdir = @top_srcdir@

LIBOBJS = @LIBOBJS@

INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = $(INSTALL_PROGRAM) -s
MKDIR_P = @MKDIR_P@

SUBDIRS = # testsuite

include config.make

include .dist_classes
include .dist_headers

PRE_CPPFLAGS = -I.

SCHEME = $(SCHEME_PROGRAM) -l $(srcdir)/scm/$(SCHEME_NAME)-compat.scm

# Missing: lsh-keygen lsh-writekey lsh-decrypt-key \
# lsh-decode-key lsh-export-key lsh-make-seed \
# lshd lshd-userauth lshd-connection @KRB_PROGRAM@ @PAM_PROGRAM@

TARGETS = lsh$(EXEEXT) lsh-transport$(EXEEXT) \
	  lshd$(EXEEXT) lshd-userauth$(EXEEXT) lshd-connection$(EXEEXT)

generated_sources = atoms_defines.h atoms_gperf.c atoms_table.c \
	packet_types.h

all check:
	$(MAKE) $@-here
	set -e; for d in $(SUBDIRS); do \
	  echo "Making $@ in $$d" ; (cd $$d && $(MAKE) $@); done

clean distclean mostlyclean maintainer-clean tags:
	set -e; for d in $(SUBDIRS); do \
	  echo "Making $@ in $$d" ; (cd $$d && $(MAKE) $@); done
	$(MAKE) $@-here

check-here:
	true

.PHONY: bootstrap
bootstrap: $(generated_sources) $(dist_classes) 

# FIXME: Probably breaks parallel builds; before the first compilation,
# make doesn't know about the dependencies on environ.h and the files
# created by the bootstrap target.
all-here: bootstrap environ.h $(TARGETS)

COMMON_SOURCES = atoms.c \
		 alist.c \
		 charset.c \
		 gc.c \
		 io.c \
		 list.c \
		 resource.c \
		 service_read.c \
		 ssh_read.c \
		 ssh_write.c \
		 xalloc.c

INTERACT_SOURCES = interact.c \
		   suspend.c \
		   unix_interact.c

TTY_SOURCES = tty.c

# FIXME pkcs5.c doesn't quite belong here, it's used only on the client side.
CRYPTO_SOURCES = algorithms.c \
		 crypto.c \
		 dsa.c \
		 lock_file.c \
		 pkcs5.c \
		 randomness.c \
		 rsa.c \
		 sexp.c \
		 spki.c \
		 unix_random.c \

TRANSPORT_SOURCES = dh_exchange.c \
		    encrypt.c \
		    keyexchange.c \
		    transport.c \
		    transport_forward.c \
		    transport_read.c \
		    transport_write.c

CONNECTION_SOURCES = channel.c \
		     channel_forward.c \
		     channel_io.c \
		     connection.c \
		     combinators.c \
		     command.c \
		     exception.c \
		     io_commands.c \
		     queue.c \
		     reaper.c \
		     tcpforward.c

SERVER_SOURCES = server.c \
		 server_config.c \
		 tokenize_config.c

lsh_SOURCES = arglist.c \
	      client.c \
	      client_escape.c \
	      client_pty.c \
	      client_session.c \
	      client_tcpforward.c \
	      gateway.c \
	      gateway_channel.c \
	      lsh.c \
	      socks.c

# FIXME: tty.c, suspend.c should not be needed. Maybe split unix_interact.c and tty.c
# differently.
lsh_transport_SOURCES = client_keyexchange.c \
			lsh-transport.c

lshd_SOURCES = daemon.c \
	       lshd.c \
	       server_keyexchange.c

lshd_userauth_SOURCES = lshd-userauth.c

lshd_connection_SOURCES = lshd-connection.c \
			  pty-helper.c \
			  server_pty.c \
			  server_session.c \
			  server_tcpforward.c \
			  translate_signal.c \
			  unix_process.c

SPECIAL_SOURCES = format.c lsh_string.c parse.c werror.c
SPECIAL_OBJS = $(SPECIAL_SOURCES:.c=.$(OBJEXT))
MINIMAL_OBJS = $(SPECIAL_SOURCES:.c=.m$(OBJEXT))

COMMON_OBJS = $(COMMON_SOURCES:.c=.$(OBJEXT))
INTERACT_OBJS = $(INTERACT_SOURCES:.c=.$(OBJEXT))
TTY_OBJS = $(TTY_SOURCES:.c=.$(OBJEXT))
CRYPTO_OBJS = $(CRYPTO_SOURCES:.c=.$(OBJEXT))
TRANSPORT_OBJS = $(TRANSPORT_SOURCES:.c=.$(OBJEXT))
CONNECTION_OBJS = $(CONNECTION_SOURCES:.c=.$(OBJEXT))
SERVER_OBJS = $(SERVER_SOURCES:.c=.$(OBJEXT))

lsh_OBJS = $(lsh_SOURCES:.c=.$(OBJEXT)) \
	   $(COMMON_OBJS) $(MINIMAL_OBJS) $(INTERACT_OBJS) $(TTY_OBJS) $(CONNECTION_OBJS)
lsh_transport_OBJS = $(lsh_transport_SOURCES:.c=.$(OBJEXT)) \
		     $(COMMON_OBJS) $(SPECIAL_OBJS) $(INTERACT_OBJS) $(TTY_OBJS) \
		     $(CRYPTO_OBJS) $(TRANSPORT_OBJS)
lshd_OBJS = $(lshd_SOURCES:.c=.$(OBJEXT)) \
	    $(COMMON_OBJS) $(SPECIAL_OBJS) $(SERVER_OBJS) $(CRYPTO_OBJS) $(TRANSPORT_OBJS)

lshd_userauth_OBJS = $(lshd_userauth_SOURCES:.c=.$(OBJEXT)) \
		     $(COMMON_OBJS) $(SPECIAL_OBJS) $(SERVER_OBJS) $(CRYPTO_OBJS)

lshd_connection_OBJS = $(lshd_connection_SOURCES:.c=.$(OBJEXT)) \
		       $(COMMON_OBJS) $(MINIMAL_OBJS) $(SERVER_OBJS) $(TTY_OBJS) $(CONNECTION_OBJS)

SOURCES = $(COMMON_SOURCES) $(SPECIAL_SOURCES) $(TRANSPORT_SOURCES) $(CONNECTION_SOURCES) \
	  $(INTERACT_SOURCES) \
	  $(lsh_SOURCES) $(lsh_transport_SOURCES) \
	  $(lshd_SOURCES) $(lshd_userauth_SOURCES) $(lshd_connection_SOURCES)

.c.$(OBJEXT):
	$(COMPILE) -c $< \
	&& $(DEP_PROCESS)

.c.m$(OBJEXT):
	$(COMPILE) -DLSH_MINIMAL -c $< -o $@ \
	&& $(DEP_PROCESS)

# This is GNU make specific
%.x: % $(srcdir)/scm/gaba.scm $(srcdir)/scm/compiler.scm
	$(SCHEME) -e main -l $(srcdir)/scm/compiler.scm \
		  -s $(srcdir)/scm/gaba.scm <$< >$(srcdir)/$(*F).xT
	test -s $(srcdir)/$(*F).xT && mv -f $(srcdir)/$(*F).xT $(srcdir)/$(*F).x

# FIXME: Won't work if the filename contains `,', `\', `"' or newline.
# NOTE: This rule is used by non-maintainer builds, so avoid using
# $< and $@ which are only available with GNU make.
environ.h: environ.h.in Makefile
	(echo '/* Automatically generated from environ.h.in, by make. */' ; \
	sed -e 's,@''prefix@,$(prefix),' \
	    -e 's,@''bindir@,$(bindir),' \
	    -e 's,@''sbindir@,$(sbindir),' \
	    -e 's,@''libexecdir@,$(libexecdir),' \
	    -e 's,@''sysconfdir@,$(sysconfdir),' \
	  < $(srcdir)/environ.h.in) >environ.hT
	test -s environ.hT && mv -f environ.hT environ.h

atoms_defines.h: atoms.in process_atoms
	$(srcdir)/process_atoms header <$< >$@T
	test -s $@T && mv -f $@T $@

# With the next version of gperf, add -F ", 0"
GPERF_FLAGS = -LANSI-C -t -c -C -l -k1,3,6,10,21,$$ -N gperf_atom 
atoms_gperf.c: atoms.in process_atoms
	$(srcdir)/process_atoms gperf <$< \
             | gperf $(GPERF_FLAGS) | sed 's/{""}/{"", 0}/g' >$@T 
	test -s $@T && mv -f $@T $@

atoms_table.c: atoms.in process_atoms
	$(srcdir)/process_atoms table <$< >$@T
	test -s $@T && mv -f $@T $@

packet_types.h: ssh.h invert-defs
	$(srcdir)/invert-defs <$< >$@T
	test -s $@T && mv -f $@T $@


# FIXME: Trim library lists
lsh$(EXEEXT): $(lsh_OBJS)
	$(LINK) $(lsh_OBJS) $(LIBS) -o $@

lsh-transport$(EXEEXT): $(lsh_transport_OBJS)
	$(LINK) $(lsh_transport_OBJS) -lspki -lnettle $(LIBS) -o $@

lshd$(EXEEXT): $(lshd_OBJS)
	$(LINK) $(lshd_OBJS) -lspki -lnettle $(LIBS) -o $@

lshd-userauth$(EXEEXT): $(lshd_userauth_OBJS)
	$(LINK) $(lshd_userauth_OBJS) -lspki -lnettle $(LIBS) -o $@

lshd-connection$(EXEEXT): $(lshd_connection_OBJS)
	$(LINK) $(lshd_connection_OBJS) -lspki -lnettle $(LIBS) -o $@

# Standard targets
Makefile: $(srcdir)/Makefile.in ../config.status
	cd .. && $(SHELL) ./config.status src/Makefile

config.make: $(srcdir)/config.make.in ../config.status
	cd .. && $(SHELL) ./config.status src/config.make

config.h: $(srcdir)/config.h.in ../config.status
	cd .. && $(SHELL) ./config.status src/config.h

@DEP_INCLUDE@ $(SOURCES:.c=.$(OBJEXT).d) $(SPECIAL_SOURCES:.c=.m$(OBJEXT).d)
