# Libspki Makefile

@SET_MAKE@

srcdir = @srcdir@
VPATH = @srcdir@

INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = $(INSTALL_PROGRAM) -s
MKDIR_P = @MKDIR_P@

SUBDIRS = tools testsuite

PRE_CPPFLAGS = -I. -I$(srcdir)

include config.make

TARGETS = libspki.a

SOURCES = certificate.c parse.c parse-transport.c names.c \
	  tag.c reduce.c verify.c

HEADERS = certificate.h parse.h tag.h

INSTALL_HEADERS = $(HEADERS) spki-types.h
DISTFILES = $(HEADERS) $(SOURCES) .bootstrap aclocal.m4 configure.ac \
	configure stamp-h.in \
	config.guess install-sh texinfo.tex \
	config.h.in config.make.in Makefile.in \
	README AUTHORS COPYING.LIB INSTALL NEWS TODO ChangeLog \
	process-types spki-types.in spki-types.h spki-gperf.h spki-type-names.h

all check install uninstall:
	$(MAKE) $@-here
	set -e; for d in $(SUBDIRS); do \
	  echo "Making $@ in $$d" ; (cd $$d && $(MAKE) $@); done

clean distclean mostlyclean maintainer-clean tags:
	set -e; for d in $(SUBDIRS); do \
	  echo "Making $@ in $$d" ; (cd $$d && $(MAKE) $@); done
	$(MAKE) $@-here

check-here:
	true

all-here: spki-types.h $(TARGETS)

# Does this get $(srcdir) right?
spki-types.h: spki-types.in process-types
	$(srcdir)/process-types header < $< > $(srcdir)/spki-types.hT
	test -s $(srcdir)/spki-types.hT \
		&& mv -f $(srcdir)/spki-types.hT $(srcdir)/spki-types.h

spki-type-names.h: spki-types.in process-types
	$(srcdir)/process-types names < $< > $(srcdir)/spki-type-names.hT
	test -s $(srcdir)/spki-type-names.hT \
		&& mv -f $(srcdir)/spki-type-names.hT $(srcdir)/spki-type-names.h

GPERF_FLAGS = -LANSI-C -t -c -C -l -E -o -k1,$$ -N spki_gperf

spki-gperf.h: spki-types.in process-types
	$(srcdir)/process-types gperf < $< | tee spki-gperf.in \
		| gperf $(GPERF_FLAGS) | sed 's/{""}/{"", 0}/g' \
		> $(srcdir)/spki-gperf.hT
	test -s $(srcdir)/spki-gperf.hT \
		&& mv -f $(srcdir)/spki-gperf.hT $(srcdir)/spki-gperf.h

.c.$(OBJEXT):
	$(COMPILE) -c $< \
	&& $(DEP_PROCESS)

OBJS = $(SOURCES:.c=.$(OBJEXT))
libspki.a: $(OBJS)
	-rm -f $@
	$(AR) $(ARFLAGS) $@ $(OBJS)
	$(RANLIB) $@

# Configure-related rules, mostly copied from the autoconf manual. No
# $(srcdir) prefixes on the targets, though.

configure: configure.ac aclocal.m4
	cd $(srcdir) && $(AUTOCONF)

# autoheader might not change config.h.in, so touch a stamp file.
config.h.in: stamp-h.in
stamp-h.in: configure.ac aclocal.m4
	cd $(srcdir) && autoheader
	echo timestamp > $(srcdir)/stamp-h.in

config.status: configure
	./config.status --recheck

config.h: stamp-h
stamp-h: config.h.in config.status
	./config.status config.h
	echo timestamp > stamp-h

Makefile: Makefile.in config.status
	./config.status $@

config.make: config.make.in config.status
	./config.status $@

config.m4: config.m4.in config.status
	./config.status $@

EXTRA_DIST = process-types \
	spki-types.in spki-types.h spki-gperf.h spki-type-names.h

.PHONY: bootstrap
bootstrap: spki-types.h spki-gperf.h spki-type-names.h

install-here: $(TARGETS) install-headers
	$(MKDIR_P) $(DESTDIR)$(libdir)
	$(INSTALL_DATA) libspki.a $(DESTDIR)$(libdir)

install-headers: $(HEADERS)
	$(MKDIR_P) $(DESTDIR)$(includedir)/spki
	for f in $(HEADERS) ; do \
	  if [ -f "$$f" ] ; then \
	    $(INSTALL_DATA) "$$f" $(DESTDIR)$(includedir)/spki ; \
	  else \
	    $(INSTALL_DATA) "$(srcdir)/$$f" $(DESTDIR)$(includedir)/spki ; \
	  fi ; done

# Uninstall
uninstall-here: uninstall-headers
	rm -f $(DESTDIR)$(libdir)/libspki.a

uninstall-headers:
	for f in $(HEADERS) ; do \
	  rm -f $(DESTDIR)$(includedir)/spki/$$f ; \
	done

# Distribution
distdir = $(PACKAGE_NAME)-$(PACKAGE_VERSION)
top_distdir = $(distdir)

# NOTE: Depending on the automake version in the parent dir,
# we must handle both absolute and relative $destdir.

distdir: $(DISTFILES)
	rm -rf "$(distdir)"
	mkdir "$(distdir)"
	set -e; for f in $(DISTFILES) ; do \
	  if [ -f "$$f" ] ; then cp "$$f" "$(distdir)" ; \
	  else cp "$(srcdir)/$$f" "$(distdir)" ; \
	  fi ; \
	done
	set -e; for d in $(SUBDIRS); do \
	  sd="$(distdir)/$$d" ; \
	  mkdir "$$sd" && $(MAKE) -C $$d distdir="`cd $$sd && pwd`" $@ ; \
	done

dist: distdir
	tar cf - $(distdir) | gzip -c >$(distdir).tar.gz	
	rm -rf $(distdir)

rm_distcheck = test ! -d distcheck-tmp \
	    || { find distcheck-tmp -type d ! -perm -200 -exec chmod u+w {} ';' \
                 && rm -fr distcheck-tmp; }; 

distcheck: dist
	$(rm_distcheck)
	mkdir distcheck-tmp
	gzip -d < $(distdir).tar.gz \
	  | { cd distcheck-tmp && tar xf - && chmod -R a-w $(distdir) ; }
	mkdir distcheck-tmp/build
	mkdir distcheck-tmp/install
	cd distcheck-tmp/build && ../$(distdir)/configure --prefix="`cd ../install && pwd`"
	cd distcheck-tmp/build && $(MAKE)
	cd distcheck-tmp/build && $(MAKE) check
	cd distcheck-tmp/build && $(MAKE) install
	cd distcheck-tmp/build && $(MAKE) uninstall
	cd distcheck-tmp && find install -type f -print > leftover-install-files
	@test `cat distcheck-tmp/leftover-install-files | wc -l` -le 1  \
	  || { echo "ERROR: files left after uninstall:" ; \
	       cat distcheck-tmp/leftover-install-files ; \
	       exit 1; }
	chmod -R a-w distcheck-tmp/install
	mkdir distcheck-tmp/destdir
	destdir="`cd distcheck-tmp/destdir && pwd`" \
	  && cd distcheck-tmp/build \
	  && $(MAKE) install DESTDIR="$$destdir" \
	  && $(MAKE) uninstall DESTDIR="$$destdir"
	cd distcheck-tmp && find destdir -type f -print > leftover-destdir-files
	@test `cat distcheck-tmp/leftover-destdir-files | wc -l` -le 1  \
	  || { echo "ERROR: destdir files left after uninstall:" ; \
	       cat distcheck-tmp/leftover-destdir-files ; \
	       exit 1; }	
	cd distcheck-tmp/build && $(MAKE) dist
	cd distcheck-tmp/build && rm *.gz
	cd distcheck-tmp/build && $(MAKE) distclean
	cd distcheck-tmp && find build -type f -print > leftover-build-files
	@test `cat distcheck-tmp/leftover-build-files | wc -l` -eq 0  \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       cat distcheck-tmp/leftover-build-files ; \
	       exit 1; }
	$(rm_distcheck)

clean-here:
	-rm -f $(TARGETS) *.$(OBJEXT)
	-rm -rf .lib

distclean-here: clean-here
	-rm -f config.h stamp-h config.log config.status \
	config.make Makefile

maintainer-clean-here:
	-rm -f spki-types.h spki-gperf.h spki-type-names.h

tags-here:	
	etags $(srcdir)/*.c $(srcdir)/*.h

parse.$(OBJEXT): spki-gperf.h
names.$(OBJEXT): spki-type-names.h

DEP_FILES = $(SOURCES:.c=.$(OBJEXT).d)
@DEP_INCLUDE@ $(DEP_FILES)
