# LSH Makefile

@SET_MAKE@

srcdir = @srcdir@
VPATH = @srcdir@

top_srcdir = @top_srcdir@

LIBOBJS = @LIBOBJS@

INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = $(INSTALL_PROGRAM) -s
MKDIR_P = @MKDIR_P@

SUBDIRS = testsuite

include config.make

include $(srcdir)/.dist_classes
include $(srcdir)/.dist_headers

# The *_builddir directories, if they exist at all, are symlinks
# created by the configure script.
PRE_CPPFLAGS = -I. -Iargp_builddir -Inettle_builddir -Ispki_builddir
PRE_LDFLAGS = -Largp_builddir -Lnettle_builddir -Lspki_builddir

SCHEME = $(SCHEME_PROGRAM) -l $(srcdir)/scm/$(SCHEME_NAME)-compat.scm

# Missing: @KRB_PROGRAM@ @PAM_PROGRAM@

BIN_PROGRAMS = lsh$(EXEEXT) lsh-transport$(EXEEXT) \
	       lsh-keygen$(EXEEXT) lsh-writekey$(EXEEXT) lsh-decrypt-key$(EXEEXT) \
	       lsh-decode-key$(EXEEXT) lsh-export-key$(EXEEXT) lsh-make-seed$(EXEEXT)
SBIN_PROGRAMS = lshd$(EXEEXT) lshd-userauth$(EXEEXT) lshd-connection$(EXEEXT) \
		lshd-pty-helper$(EXEEXT)

TARGETS = $(BIN_PROGRAMS) $(SBIN_PROGRAMS)

SCRIPTS = lsh-authorize ssh-conv lsh-upgrade lsh-upgrade-key lcp lshg

generated_sources = atoms_defines.h atoms_gperf.c atoms_table.c \
	packet_types.h

all check:
	$(MAKE) $@-here
	set -e; for d in $(SUBDIRS); do \
	  echo "Making $@ in $$d" ; (cd $$d && $(MAKE) $@); done

clean distclean mostlyclean maintainer-clean tags:
	set -e; for d in $(SUBDIRS); do \
	  echo "Making $@ in $$d" ; (cd $$d && $(MAKE) $@); done
	$(MAKE) $@-here

check-here:
	true

.PHONY: bootstrap
bootstrap: $(generated_sources) $(dist_classes) 

# FIXME: Probably breaks parallel builds; before the first compilation,
# make doesn't know about the dependencies on environ.h and the files
# created by the bootstrap target.
all-here: bootstrap environ.h $(TARGETS)

COMMON_SOURCES = atoms.c \
		 alist.c \
		 charset.c \
		 gc.c \
		 io.c \
		 list.c \
		 resource.c \
		 service_read.c \
		 ssh_read.c \
		 ssh_write.c \
		 xalloc.c

INTERACT_SOURCES = interact.c unix_interact.c

TTY_SOURCES = tty.c

# FIXME pkcs5.c doesn't quite belong here, it's used only on the client side.
# And compress.c shold be needed only when we have zlib support.
CRYPTO_SOURCES = algorithms.c \
		 compress.c \
		 crypto.c \
		 dsa.c \
		 lock_file.c \
		 pkcs5.c \
		 randomness.c \
		 rsa.c \
		 sexp.c \
		 spki.c \
		 unix_random.c \

# Decryption of private keys not needed on the server side.
CRYPTO_CLIENT_SOURCES = spki-decrypt.c

TRANSPORT_SOURCES = dh_exchange.c \
		    encrypt.c \
		    keyexchange.c \
		    transport.c \
		    transport_forward.c \
		    transport_read.c \
		    transport_write.c

CONNECTION_SOURCES = channel.c \
		     channel_forward.c \
		     channel_io.c \
		     connection.c \
		     combinators.c \
		     command.c \
		     exception.c \
		     queue.c \
		     reaper.c \
		     tcpforward.c

SERVER_SOURCES = server.c \
		 server_config.c \
		 tokenize_config.c

pty_helper_SOURCES = pty-helper.c

lsh_SOURCES = arglist.c \
	      client.c \
	      client_escape.c \
	      client_pty.c \
	      client_session.c \
	      client_tcpforward.c \
	      client_x11.c \
	      gateway.c \
	      gateway_channel.c \
	      lsh.c \
	      socks.c \
	      xauth.c

lsh_transport_SOURCES = client_keyexchange.c \
			lsh-transport.c

lsh_keygen_SOURCES = lsh-keygen.c

lsh_writekey_SOURCES = lsh-writekey.c

lsh_decrypt_key_SOURCES = lsh-decrypt-key.c

lsh_decode_key_SOURCES = lsh-decode-key.c

lsh_export_key_SOURCES = lsh-export-key.c

lsh_make_seed_SOURCES = lsh-make-seed.c

lshd_SOURCES = daemon.c \
	       lshd.c \
	       server_keyexchange.c

lshd_userauth_SOURCES = lshd-userauth.c

lshd_connection_SOURCES = lshd-connection.c \
			  server_pty.c \
			  server_session.c \
			  server_tcpforward.c \
 			  server_x11.c \
			  translate_signal.c \
			  unix_process.c

lshd_pty_helper_SOURCES = lshd-pty-helper.c

SPECIAL_SOURCES = format.c lsh_string.c parse.c werror.c

SOURCES = $(COMMON_SOURCES) $(SPECIAL_SOURCES) \
	  $(CRYPTO_SOURCES) $(CRYPTO_CLIENT_SOURCES) \
	  $(TRANSPORT_SOURCES) $(CONNECTION_SOURCES) \
	  $(SERVER_SOURCES) $(INTERACT_SOURCES) $(TTY_SOURCES) \
	  $(lsh_SOURCES) $(lsh_transport_SOURCES) \
	  $(lsh_keygen_SOURCES) $(lsh_writekey_SOURCES) $(lsh_decrypt_key_SOURCES) \
	  $(lsh_decode_key_SOURCES) $(lsh_export_key_SOURCES) $(lsh_make_seed_SOURCES) \
	  $(lshd_SOURCES) $(lshd_userauth_SOURCES) $(lshd_connection_SOURCES) \
	  $(pty_helper_SOURCES) $(lshd_pty_helper_SOURCES)

DISTFILES = $(SOURCES) $(HEADERS) $(SCRIPTS) \
	    .dist_headers $(dist_headers) .dist_classes $(dist_classes) \
	    atoms.in environ.h.in process_atoms invert-defs $(generated_sources) \
	    config.h.in Makefile.in config.make.in 

SPECIAL_OBJS = $(SPECIAL_SOURCES:.c=.$(OBJEXT))
MINIMAL_OBJS = $(SPECIAL_SOURCES:.c=.m$(OBJEXT))

COMMON_OBJS = $(COMMON_SOURCES:.c=.$(OBJEXT))
INTERACT_OBJS = $(INTERACT_SOURCES:.c=.$(OBJEXT))
TTY_OBJS = $(TTY_SOURCES:.c=.$(OBJEXT))
CRYPTO_OBJS = $(CRYPTO_SOURCES:.c=.$(OBJEXT))
CRYPTO_CLIENT_OBJS = $(CRYPTO_CLIENT_SOURCES:.c=.$(OBJEXT))
TRANSPORT_OBJS = $(TRANSPORT_SOURCES:.c=.$(OBJEXT))
CONNECTION_OBJS = $(CONNECTION_SOURCES:.c=.$(OBJEXT))
SERVER_OBJS = $(SERVER_SOURCES:.c=.$(OBJEXT))
pty_helper_OBJS = $(pty_helper_SOURCES:.c=.$(OBJEXT))

lsh_OBJS = $(lsh_SOURCES:.c=.$(OBJEXT)) \
	   $(COMMON_OBJS) $(MINIMAL_OBJS) $(INTERACT_OBJS) $(TTY_OBJS) $(CONNECTION_OBJS)

lsh_transport_OBJS = $(lsh_transport_SOURCES:.c=.$(OBJEXT)) \
		     $(COMMON_OBJS) $(SPECIAL_OBJS) $(INTERACT_OBJS) \
		     $(CRYPTO_OBJS) $(CRYPTO_CLIENT_OBJS) $(TRANSPORT_OBJS)

lsh_keygen_OBJS = $(lsh_keygen_SOURCES:.c=.$(OBJEXT)) \
		  $(COMMON_OBJS) $(SPECIAL_OBJS) $(CRYPTO_OBJS)

lsh_writekey_OBJS = $(lsh_writekey_SOURCES:.c=.$(OBJEXT)) \
		    $(COMMON_OBJS) $(SPECIAL_OBJS) $(INTERACT_OBJS) \
		    $(CRYPTO_OBJS)

lsh_decrypt_key_OBJS = $(lsh_decrypt_key_SOURCES:.c=.$(OBJEXT)) \
		       $(COMMON_OBJS) $(SPECIAL_OBJS) $(INTERACT_OBJS) \
		       $(CRYPTO_OBJS) $(CRYPTO_CLIENT_OBJS)

lsh_decode_key_OBJS = $(lsh_decode_key_SOURCES:.c=.$(OBJEXT)) \
		      $(COMMON_OBJS) $(SPECIAL_OBJS) $(CRYPTO_OBJS)

lsh_export_key_OBJS = $(lsh_export_key_SOURCES:.c=.$(OBJEXT)) \
		      $(COMMON_OBJS) $(SPECIAL_OBJS) \
		      $(CRYPTO_OBJS)

lsh_make_seed_OBJS = $(lsh_make_seed_SOURCES:.c=.$(OBJEXT)) \
		       $(COMMON_OBJS) $(SPECIAL_OBJS) \
		       $(CRYPTO_OBJS)

lshd_OBJS = $(lshd_SOURCES:.c=.$(OBJEXT)) \
	    $(COMMON_OBJS) $(SPECIAL_OBJS) $(SERVER_OBJS) $(CRYPTO_OBJS) $(TRANSPORT_OBJS)

lshd_userauth_OBJS = $(lshd_userauth_SOURCES:.c=.$(OBJEXT)) \
		     $(COMMON_OBJS) $(SPECIAL_OBJS) $(SERVER_OBJS) $(CRYPTO_OBJS)

lshd_connection_OBJS = $(lshd_connection_SOURCES:.c=.$(OBJEXT)) \
		       $(COMMON_OBJS) $(MINIMAL_OBJS) $(SERVER_OBJS) $(TTY_OBJS) \
		       $(pty_helper_OBJS) $(CONNECTION_OBJS)

lshd_pty_helper_OBJS = $(lshd_pty_helper_SOURCES:.c=.$(OBJEXT)) $(pty_helper_OBJS)

.c.$(OBJEXT):
	$(COMPILE) -c $< \
	&& $(DEP_PROCESS)

.c.m$(OBJEXT):
	$(COMPILE) -DLSH_MINIMAL -c $< -o $@ \
	&& $(DEP_PROCESS)

# This is GNU make specific
%.x: % $(srcdir)/scm/gaba.scm $(srcdir)/scm/compiler.scm
	$(SCHEME) -e main -l $(srcdir)/scm/compiler.scm \
		  -s $(srcdir)/scm/gaba.scm <$< >$(srcdir)/$(*F).xT
	test -s $(srcdir)/$(*F).xT && mv -f $(srcdir)/$(*F).xT $(srcdir)/$(*F).x

class-map: $(srcdir)/make-class-map $(dist_classes)
	(cd $(srcdir) && cat $(dist_classes) | grep '^CLASS:' \
	| sort | awk -f ./make-class-map > $@)

# FIXME: Won't work if the filename contains `,', `\', `"' or newline.
# NOTE: This rule is used by non-maintainer builds, so avoid using
# $< and $@ which are only available with GNU make.
environ.h: environ.h.in Makefile
	(echo '/* Automatically generated from environ.h.in, by make. */' ; \
	sed -e 's,@''prefix@,$(prefix),' \
	    -e 's,@''bindir@,$(bindir),' \
	    -e 's,@''sbindir@,$(sbindir),' \
	    -e 's,@''libexecdir@,$(libexecdir),' \
	    -e 's,@''sysconfdir@,$(sysconfdir),' \
	  < $(srcdir)/environ.h.in) >environ.hT
	test -s environ.hT && mv -f environ.hT environ.h

atoms_defines.h: atoms.in process_atoms
	$(srcdir)/process_atoms header <$< >$(srcdir)/atoms_defines.hT
	test -s $(srcdir)/atoms_defines.hT && mv -f $(srcdir)/atoms_defines.hT $(srcdir)/atoms_defines.h

# With the next version of gperf, add -F ", 0"
GPERF_FLAGS = -LANSI-C -t -c -C -l -k1,3,6,10,21,$$ -N gperf_atom 
atoms_gperf.c: atoms.in process_atoms
	$(srcdir)/process_atoms gperf <$< \
             | gperf $(GPERF_FLAGS) | sed 's/{""}/{"", 0}/g' >$(srcdir)/atoms_gperf.cT 
	test -s $(srcdir)/atoms_gperf.cT && mv -f $(srcdir)/atoms_gperf.cT $(srcdir)/atoms_gperf.c

atoms_table.c: atoms.in process_atoms
	$(srcdir)/process_atoms table <$< >$(srcdir)/atoms_table.cT
	test -s $(srcdir)/atoms_table.cT && mv -f $(srcdir)/atoms_table.cT $(srcdir)/atoms_table.c

packet_types.h: ssh.h invert-defs
	$(srcdir)/invert-defs <$< >$(srcdir)/packet_types.hT
	test -s $(srcdir)/packet_types.hT && mv -f $(srcdir)/packet_types.hT $(srcdir)/packet_types.h


# FIXME: Trim library dependencies, not all should depend on hogweed and gmp
lsh$(EXEEXT): $(lsh_OBJS)
	$(LINK) $(lsh_OBJS) $(LIBS) -o $@

lsh-transport$(EXEEXT): $(lsh_transport_OBJS)
	$(LINK) $(lsh_transport_OBJS) -lspki -lhogweed -lnettle $(LIBS) -o $@

lsh-keygen$(EXEEXT): $(lsh_keygen_OBJS)
	$(LINK) $(lsh_keygen_OBJS) -lspki -lhogweed -lnettle $(LIBS) -o $@

lsh-writekey$(EXEEXT): $(lsh_writekey_OBJS)
	$(LINK) $(lsh_writekey_OBJS) -lspki -lhogweed -lnettle $(LIBS) -o $@

lsh-decrypt-key$(EXEEXT): $(lsh_decrypt_key_OBJS)
	$(LINK) $(lsh_decrypt_key_OBJS) -lspki -lhogweed -lnettle $(LIBS) -o $@

lsh-decode-key$(EXEEXT): $(lsh_decode_key_OBJS)
	$(LINK) $(lsh_decode_key_OBJS) -lspki -lhogweed -lnettle $(LIBS) -o $@

lsh-export-key$(EXEEXT): $(lsh_export_key_OBJS)
	$(LINK) $(lsh_export_key_OBJS) -lspki -lhogweed -lnettle $(LIBS) -o $@

lsh-make-seed$(EXEEXT): $(lsh_make_seed_OBJS)
	$(LINK) $(lsh_make_seed_OBJS) -lspki -lhogweed -lnettle $(LIBS) -o $@

lshd$(EXEEXT): $(lshd_OBJS)
	$(LINK) $(lshd_OBJS) -lspki -lhogweed -lnettle $(LIBS) -o $@

lshd-userauth$(EXEEXT): $(lshd_userauth_OBJS)
	$(LINK) $(lshd_userauth_OBJS) -lspki -lhogweed -lnettle $(LIBS) -o $@

lshd-connection$(EXEEXT): $(lshd_connection_OBJS)
	$(LINK) $(lshd_connection_OBJS) $(LIBS) -o $@

lshd-pty-helper$(EXEEXT): $(lshd_pty_helper_OBJS)
	$(LINK) $(lshd_pty_helper_OBJS) $(LIBS) -o $@

# Currently, all scripts are in the source directory.
install: $(BIN_PROGRAMS) $(SBIN_PROGRAMS)
	$(MKDIR_P) $(DESTDIR)$(bindir)
	$(MKDIR_P) $(DESTDIR)$(sbindir)
	for f in $(BIN_PROGRAMS) ; do \
	  $(INSTALL_PROGRAM) $$f $(DESTDIR)$(bindir) ; \
	done
	for f in $(SCRIPTS) ; do \
	  $(INSTALL_PROGRAM) $(srcdir)/$$f $(DESTDIR)$(bindir) ; \
	done
	for f in $(SBIN_PROGRAMS) ; do \
	  $(INSTALL_PROGRAM) $$f $(DESTDIR)$(sbindir) ; \
	done

uninstall:
	cd $(DESTDIR)$(bindir) && rm -f $(BIN_PROGRAMS) $(SCRIPTS)
	cd $(DESTDIR)$(sbindir) && rm -f $(SBIN_PROGRAMS)

distdir: $(DISTFILES)
	set -e; \
	mkdir "$(distdir)/scm" ; \
	cp $(srcdir)/scm/*.scm "$(distdir)/scm" ; \
	for f in $(DISTFILES) ; do \
	  if [ -f "$$f" ] ; then cp "$$f" "$(distdir)" ; \
	  else cp "$(srcdir)/$$f" "$(distdir)" ; \
	  fi ; \
	done ; \
	set -e; for d in $(SUBDIRS); do \
	  sd="$(distdir)/$$d" ; \
	  mkdir "$$sd" && $(MAKE) -C $$d distdir="`cd $$sd && pwd`" $@ ; \
	done

clean-here:
	-rm -f $(TARGETS) *.$(OBJEXT) *.m$(OBJEXT)

distclean-here: clean-here
	-rm -f config.h stamp-h	config.make environ.h Makefile *.d

maintainer-clean-here:
	-rm -f $(generated_sources)

tags-here:	
	etags $(srcdir)/*.c $(srcdir)/*.h

# Standard targets
Makefile: $(srcdir)/Makefile.in ../config.status
	cd .. && $(SHELL) ./config.status src/Makefile

config.make: $(srcdir)/config.make.in ../config.status
	cd .. && $(SHELL) ./config.status src/config.make

config.h: $(srcdir)/config.h.in ../config.status
	cd .. && $(SHELL) ./config.status src/config.h

@DEP_INCLUDE@ $(SOURCES:.c=.$(OBJEXT).d) $(SPECIAL_SOURCES:.c=.m$(OBJEXT).d)
