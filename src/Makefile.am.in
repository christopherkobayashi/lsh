## Process this file with make_am to produce Makefile.am -*-makefile-*-
SUBDIRS: symmetric
CVS_HEADERS: cvs_headers
CLASS_FILES: dist_x_files
BODY:

AUTOMAKE_OPTIONS = foreign

# To remake all Makefile.am-files, run
#
# 	./make_am
#
# You should run ./make_am --rethink after recompiling, but before
# making a dist, as it uses dependency information to figure out which
# header files should be included in th dist. How to tell this to
# make? FIXME: These rules won't remake Makefile.am files in
# subdrectries.

# FIXME: Use the BASH variable to execute the script. The problem is
# that the script attempts to start itself with "$0 args".

Makefile.am: Makefile.am.in
	(cd $(top_srcdir) && $(MAKE) src/Makefile.am)

bin_PROGRAMS = lsh lsh_keygen lsh_writekey
sbin_PROGRAMS = lshd
noinst_PROGRAMS = prime_table digit_table sexp_test
noinst_LIBRARIES = liblsh.a
# noinst_HEADERS = $(dist_x_files) $(cvs_headers)

# Don't use BUILT_SOURCES, as all these files are #included, and can't be
# compiled or dependency checked independently.

generated_sources = atoms_defines.h atoms_gperf.c atoms_table.c \
	prime_table.h sexp_table.h digit_table.h packet_types.h

liblsh_a_SOURCES = abstract_io.c abstract_crypto.c abstract_compress.c \
	algorithms.c alist.c arcfour.c atoms.c \
	bignum.c blocking_write.c blowfish.c \
	cascade.c cast.c cbc.c channel.c channel_commands.c charset.c \
	client.c client_keyexchange.c client_password.c client_pty.c \
	client_userauth.c \
	combinators.c command.c compress.c connection.c connection_commands.c \
	debug.c des.c disconnect.c  dsa_keygen.c encrypt.c \
	format.c gc.c hmac.c io.c io_commands.c keyexchange.c \
	list.c md5.c \
	packet_ignore.c pad.c parse.c password.c publickey_crypto.c \
	queue.c \
	randomness.c \
	read_scan.c read_data.c read_line.c read_packet.c reaper.c resource.c \
	server.c server_keyexchange.c server_password.c \
	server_pty.c server_session.c server_userauth.c \
	sexp.c sexp_parser.c sexp_streamed_parser.c \
	sha.c service.c ssh1_fallback.c \
	string_buffer.c tcpforward.c \
	translate_signal.c tty.c twofish.c unpad.c userauth.c \
	werror.c write_buffer.c xalloc.c zlib.c

atoms_defines.h: atoms.in process_atoms
	$(BASH) $(srcdir)/process_atoms header <$(srcdir)/atoms.in >$@T
	test -s $@T && mv -f $@T $@

atoms_gperf.c: atoms.in process_atoms
	$(BASH) $(srcdir)/process_atoms gperf <$(srcdir)/atoms.in \
             | gperf >$@T -LANSI-C -t -c -l -k1,7,$$ -N gperf_atom 
	test -s $@T && mv -f $@T $@

atoms_table.c: atoms.in process_atoms
	$(BASH) $(srcdir)/process_atoms table <$(srcdir)/atoms.in >$@T
	test -s $@T && mv -f $@T $@

PRIME_LIMIT = 1024

prime_table.h: prime_table
	./prime_table $(PRIME_LIMIT) >$@T
	test -s $@T && mv -f $@T $@

prime_table_LDADD =

sexp_table.h: sexp_chars.in $(srcdir)/make_char_classes
	$(SCHEME) -e main -s $(srcdir)/make_char_classes <$< >$@T
	test -s $@T && mv -f $@T $@

digit_table_LDADD =

digit_table.h: digit_table
	./digit_table >$@T
	test -s $@T && mv -f $@T $@

packet_types.h: ssh.h invert-defs
	$(srcdir)/invert-defs <ssh.h >$@T
	test -s $@T && mv -f $@T $@

# typedescr.h: ssh.h $(top_srcdir)/misc/mk-reverse-table
# 	  $(PERL) $(top_srcdir)/misc/mk-reverse-table ssh.h >$@T
# 	  if test -s $@T ; then mv -f $@T $@ ; else touch $@ ; fi

LDADD = @LIBOBJS@ liblsh.a symmetric/libsymmetric.a 

# Is this rule needed?
# all-recursive check-recursive: config.h

# lsh_LDADD = @LIBOBJS@ liblsh.a lib/libsymmetric.a 
# lshd_LDADD = @LIBOBJS@ liblsh.a lib/libsymmetric.a 
# lsh_keygen_LDADD = @LIBOBJS@ liblsh.a lib/libsymmetric.a 

# lsh_DEPENDENCIES = @LIBOBJS@ symmetric liblsh.a
# lshd_DEPENDENCIES = @LIBOBJS@ symmetric liblsh.a
# lsh_keygen_DEPENDENCIES = @LIBOBJS@ symmetric liblsh.a
# lsh_writekey_DEPENDENCIES = @LIBOBJS@ symmetric liblsh.a
# 
# .PHONY: symmetric
# symmetric:
# 	  (cd lib && $(MAKE) libsymmetric.a)

EXTRA_DIST = atoms.in process_atoms make_class $(generated_sources) \
	make_char_classes sexp_chars.in \
	getopt.h getopt.c getopt1.c \
	jpoll.h jpoll.c \
	$(cvs_headers) $(dist_x_files) Makefile.am.in 

CLEANFILES = *.hT *.cT *.xT
MAINTAINERCLEANFILES += $(dist_x_files)

# Class files
# SUFFIXES = .xh .xc
 
.PHONY: depend
depend:
	rm -f $(DEP_FILES)
	make $(DEP_FILES)

# There are three problems with this rule:

# 1. It causes the dependency files to be created twice. It would be
# better to add .deps/%.P as an extra target to compilation rule.
# I.e, %.o .deps/%.P : %.c

# 2. It should not depend on the .c.x file.

# 3. It requires GNU-make. We'll have to figure out how to include
# some rules only in developer mode.

# .deps/%.P : %.c %.c.x
# 	  $(CC) $(CPPFLAGS) $(DEFS) -M -MG $< > $@

MAINTAINERCLEANFILES += $(DEP_FILES)

# This is GNU make specific

%.x: % $(srcdir)/make_class $(srcdir)/compiler.scm
	$(SCHEME) -e main -l $(srcdir)/compiler.scm \
		  -s $(srcdir)/make_class <$< >$@T
	test -s $@T && mv -f $@T $@

include $(top_srcdir)/misc/ctags.mk
